// Code generated by "xcweaver generate". DO NOT EDIT.
//go:build !ignoreWeaverGen

package xcweaver

import (
	"context"
	"errors"
	"github.com/XCWeaver/xcweaver/runtime/codegen"
	"github.com/XCWeaver/xcweaver/runtime/protos"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:  "github.com/XCWeaver/xcweaver/deployerControl",
		Iface: reflect.TypeOf((*deployerControl)(nil)).Elem(),
		Impl:  reflect.TypeOf(localDeployerControl{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return deployerControl_local_stub{impl: impl.(deployerControl), tracer: tracer, activateComponentMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/deployerControl", Method: "ActivateComponent", Remote: false}), exportListenerMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/deployerControl", Method: "ExportListener", Remote: false}), getAntipodeAgentInfoMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/deployerControl", Method: "GetAntipodeAgentInfo", Remote: false}), getListenerAddressMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/deployerControl", Method: "GetListenerAddress", Remote: false}), getSelfCertificateMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/deployerControl", Method: "GetSelfCertificate", Remote: false}), handleTraceSpansMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/deployerControl", Method: "HandleTraceSpans", Remote: false}), logBatchMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/deployerControl", Method: "LogBatch", Remote: false}), verifyClientCertificateMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/deployerControl", Method: "VerifyClientCertificate", Remote: false}), verifyServerCertificateMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/deployerControl", Method: "VerifyServerCertificate", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return deployerControl_client_stub{stub: stub, activateComponentMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/deployerControl", Method: "ActivateComponent", Remote: true}), exportListenerMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/deployerControl", Method: "ExportListener", Remote: true}), getAntipodeAgentInfoMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/deployerControl", Method: "GetAntipodeAgentInfo", Remote: true}), getListenerAddressMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/deployerControl", Method: "GetListenerAddress", Remote: true}), getSelfCertificateMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/deployerControl", Method: "GetSelfCertificate", Remote: true}), handleTraceSpansMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/deployerControl", Method: "HandleTraceSpans", Remote: true}), logBatchMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/deployerControl", Method: "LogBatch", Remote: true}), verifyClientCertificateMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/deployerControl", Method: "VerifyClientCertificate", Remote: true}), verifyServerCertificateMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/deployerControl", Method: "VerifyServerCertificate", Remote: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return deployerControl_server_stub{impl: impl.(deployerControl), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return deployerControl_reflect_stub{caller: caller}
		},
		RefData: "",
	})
	codegen.Register(codegen.Registration{
		Name:  "github.com/XCWeaver/xcweaver/weaveletControl",
		Iface: reflect.TypeOf((*weaveletControl)(nil)).Elem(),
		Impl:  reflect.TypeOf(noopWeaveletControl{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return weaveletControl_local_stub{impl: impl.(weaveletControl), tracer: tracer, getHealthMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/weaveletControl", Method: "GetHealth", Remote: false}), getLoadMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/weaveletControl", Method: "GetLoad", Remote: false}), getMetricsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/weaveletControl", Method: "GetMetrics", Remote: false}), getProfileMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/weaveletControl", Method: "GetProfile", Remote: false}), initWeaveletMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/weaveletControl", Method: "InitWeavelet", Remote: false}), updateComponentsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/weaveletControl", Method: "UpdateComponents", Remote: false}), updateRoutingInfoMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/weaveletControl", Method: "UpdateRoutingInfo", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return weaveletControl_client_stub{stub: stub, getHealthMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/weaveletControl", Method: "GetHealth", Remote: true}), getLoadMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/weaveletControl", Method: "GetLoad", Remote: true}), getMetricsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/weaveletControl", Method: "GetMetrics", Remote: true}), getProfileMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/weaveletControl", Method: "GetProfile", Remote: true}), initWeaveletMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/weaveletControl", Method: "InitWeavelet", Remote: true}), updateComponentsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/weaveletControl", Method: "UpdateComponents", Remote: true}), updateRoutingInfoMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/XCWeaver/xcweaver/weaveletControl", Method: "UpdateRoutingInfo", Remote: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return weaveletControl_server_stub{impl: impl.(weaveletControl), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return weaveletControl_reflect_stub{caller: caller}
		},
		RefData: "",
	})
}

// xcweaver.InstanceOf checks.
var _ InstanceOf[deployerControl] = (*localDeployerControl)(nil)
var _ InstanceOf[weaveletControl] = (*noopWeaveletControl)(nil)

// xcweaver.Router checks.
var _ Unrouted = (*localDeployerControl)(nil)
var _ Unrouted = (*noopWeaveletControl)(nil)

// Local stub implementations.

type deployerControl_local_stub struct {
	impl                           deployerControl
	tracer                         trace.Tracer
	activateComponentMetrics       *codegen.MethodMetrics
	exportListenerMetrics          *codegen.MethodMetrics
	getAntipodeAgentInfoMetrics    *codegen.MethodMetrics
	getListenerAddressMetrics      *codegen.MethodMetrics
	getSelfCertificateMetrics      *codegen.MethodMetrics
	handleTraceSpansMetrics        *codegen.MethodMetrics
	logBatchMetrics                *codegen.MethodMetrics
	verifyClientCertificateMetrics *codegen.MethodMetrics
	verifyServerCertificateMetrics *codegen.MethodMetrics
}

// Check that deployerControl_local_stub implements the deployerControl interface.
var _ deployerControl = (*deployerControl_local_stub)(nil)

func (s deployerControl_local_stub) ActivateComponent(ctx context.Context, a0 *protos.ActivateComponentRequest) (r0 *protos.ActivateComponentReply, err error) {
	// Update metrics.
	begin := s.activateComponentMetrics.Begin()
	defer func() { s.activateComponentMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "xcweaver.deployerControl.ActivateComponent", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.ActivateComponent(ctx, a0)
}

func (s deployerControl_local_stub) ExportListener(ctx context.Context, a0 *protos.ExportListenerRequest) (r0 *protos.ExportListenerReply, err error) {
	// Update metrics.
	begin := s.exportListenerMetrics.Begin()
	defer func() { s.exportListenerMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "xcweaver.deployerControl.ExportListener", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.ExportListener(ctx, a0)
}

func (s deployerControl_local_stub) GetAntipodeAgentInfo(ctx context.Context, a0 *protos.GetAntipodeAgentInfoRequest) (r0 *protos.GetAntipodeAgentInfoReply, err error) {
	// Update metrics.
	begin := s.getAntipodeAgentInfoMetrics.Begin()
	defer func() { s.getAntipodeAgentInfoMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "xcweaver.deployerControl.GetAntipodeAgentInfo", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetAntipodeAgentInfo(ctx, a0)
}

func (s deployerControl_local_stub) GetListenerAddress(ctx context.Context, a0 *protos.GetListenerAddressRequest) (r0 *protos.GetListenerAddressReply, err error) {
	// Update metrics.
	begin := s.getListenerAddressMetrics.Begin()
	defer func() { s.getListenerAddressMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "xcweaver.deployerControl.GetListenerAddress", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetListenerAddress(ctx, a0)
}

func (s deployerControl_local_stub) GetSelfCertificate(ctx context.Context, a0 *protos.GetSelfCertificateRequest) (r0 *protos.GetSelfCertificateReply, err error) {
	// Update metrics.
	begin := s.getSelfCertificateMetrics.Begin()
	defer func() { s.getSelfCertificateMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "xcweaver.deployerControl.GetSelfCertificate", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetSelfCertificate(ctx, a0)
}

func (s deployerControl_local_stub) HandleTraceSpans(ctx context.Context, a0 *protos.TraceSpans) (err error) {
	// Update metrics.
	begin := s.handleTraceSpansMetrics.Begin()
	defer func() { s.handleTraceSpansMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "xcweaver.deployerControl.HandleTraceSpans", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.HandleTraceSpans(ctx, a0)
}

func (s deployerControl_local_stub) LogBatch(ctx context.Context, a0 *protos.LogEntryBatch) (err error) {
	// Update metrics.
	begin := s.logBatchMetrics.Begin()
	defer func() { s.logBatchMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "xcweaver.deployerControl.LogBatch", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.LogBatch(ctx, a0)
}

func (s deployerControl_local_stub) VerifyClientCertificate(ctx context.Context, a0 *protos.VerifyClientCertificateRequest) (r0 *protos.VerifyClientCertificateReply, err error) {
	// Update metrics.
	begin := s.verifyClientCertificateMetrics.Begin()
	defer func() { s.verifyClientCertificateMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "xcweaver.deployerControl.VerifyClientCertificate", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.VerifyClientCertificate(ctx, a0)
}

func (s deployerControl_local_stub) VerifyServerCertificate(ctx context.Context, a0 *protos.VerifyServerCertificateRequest) (r0 *protos.VerifyServerCertificateReply, err error) {
	// Update metrics.
	begin := s.verifyServerCertificateMetrics.Begin()
	defer func() { s.verifyServerCertificateMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "xcweaver.deployerControl.VerifyServerCertificate", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.VerifyServerCertificate(ctx, a0)
}

type weaveletControl_local_stub struct {
	impl                     weaveletControl
	tracer                   trace.Tracer
	getHealthMetrics         *codegen.MethodMetrics
	getLoadMetrics           *codegen.MethodMetrics
	getMetricsMetrics        *codegen.MethodMetrics
	getProfileMetrics        *codegen.MethodMetrics
	initWeaveletMetrics      *codegen.MethodMetrics
	updateComponentsMetrics  *codegen.MethodMetrics
	updateRoutingInfoMetrics *codegen.MethodMetrics
}

// Check that weaveletControl_local_stub implements the weaveletControl interface.
var _ weaveletControl = (*weaveletControl_local_stub)(nil)

func (s weaveletControl_local_stub) GetHealth(ctx context.Context, a0 *protos.GetHealthRequest) (r0 *protos.GetHealthReply, err error) {
	// Update metrics.
	begin := s.getHealthMetrics.Begin()
	defer func() { s.getHealthMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "xcweaver.weaveletControl.GetHealth", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetHealth(ctx, a0)
}

func (s weaveletControl_local_stub) GetLoad(ctx context.Context, a0 *protos.GetLoadRequest) (r0 *protos.GetLoadReply, err error) {
	// Update metrics.
	begin := s.getLoadMetrics.Begin()
	defer func() { s.getLoadMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "xcweaver.weaveletControl.GetLoad", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetLoad(ctx, a0)
}

func (s weaveletControl_local_stub) GetMetrics(ctx context.Context, a0 *protos.GetMetricsRequest) (r0 *protos.GetMetricsReply, err error) {
	// Update metrics.
	begin := s.getMetricsMetrics.Begin()
	defer func() { s.getMetricsMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "xcweaver.weaveletControl.GetMetrics", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetMetrics(ctx, a0)
}

func (s weaveletControl_local_stub) GetProfile(ctx context.Context, a0 *protos.GetProfileRequest) (r0 *protos.GetProfileReply, err error) {
	// Update metrics.
	begin := s.getProfileMetrics.Begin()
	defer func() { s.getProfileMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "xcweaver.weaveletControl.GetProfile", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetProfile(ctx, a0)
}

func (s weaveletControl_local_stub) InitWeavelet(ctx context.Context, a0 *protos.InitWeaveletRequest) (r0 *protos.InitWeaveletReply, err error) {
	// Update metrics.
	begin := s.initWeaveletMetrics.Begin()
	defer func() { s.initWeaveletMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "xcweaver.weaveletControl.InitWeavelet", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.InitWeavelet(ctx, a0)
}

func (s weaveletControl_local_stub) UpdateComponents(ctx context.Context, a0 *protos.UpdateComponentsRequest) (r0 *protos.UpdateComponentsReply, err error) {
	// Update metrics.
	begin := s.updateComponentsMetrics.Begin()
	defer func() { s.updateComponentsMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "xcweaver.weaveletControl.UpdateComponents", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.UpdateComponents(ctx, a0)
}

func (s weaveletControl_local_stub) UpdateRoutingInfo(ctx context.Context, a0 *protos.UpdateRoutingInfoRequest) (r0 *protos.UpdateRoutingInfoReply, err error) {
	// Update metrics.
	begin := s.updateRoutingInfoMetrics.Begin()
	defer func() { s.updateRoutingInfoMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "xcweaver.weaveletControl.UpdateRoutingInfo", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.UpdateRoutingInfo(ctx, a0)
}

// Client stub implementations.

type deployerControl_client_stub struct {
	stub                           codegen.Stub
	activateComponentMetrics       *codegen.MethodMetrics
	exportListenerMetrics          *codegen.MethodMetrics
	getAntipodeAgentInfoMetrics    *codegen.MethodMetrics
	getListenerAddressMetrics      *codegen.MethodMetrics
	getSelfCertificateMetrics      *codegen.MethodMetrics
	handleTraceSpansMetrics        *codegen.MethodMetrics
	logBatchMetrics                *codegen.MethodMetrics
	verifyClientCertificateMetrics *codegen.MethodMetrics
	verifyServerCertificateMetrics *codegen.MethodMetrics
}

// Check that deployerControl_client_stub implements the deployerControl interface.
var _ deployerControl = (*deployerControl_client_stub)(nil)

func (s deployerControl_client_stub) ActivateComponent(ctx context.Context, a0 *protos.ActivateComponentRequest) (r0 *protos.ActivateComponentReply, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.activateComponentMetrics.Begin()
	defer func() { s.activateComponentMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "xcweaver.deployerControl.ActivateComponent", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_ActivateComponentRequest_c3e03861(enc, a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_ptr_ActivateComponentReply_7f24f708(dec)
	err = dec.Error()
	return
}

func (s deployerControl_client_stub) ExportListener(ctx context.Context, a0 *protos.ExportListenerRequest) (r0 *protos.ExportListenerReply, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.exportListenerMetrics.Begin()
	defer func() { s.exportListenerMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "xcweaver.deployerControl.ExportListener", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_ExportListenerRequest_3683bbeb(enc, a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_ptr_ExportListenerReply_5fe4f6f2(dec)
	err = dec.Error()
	return
}

func (s deployerControl_client_stub) GetAntipodeAgentInfo(ctx context.Context, a0 *protos.GetAntipodeAgentInfoRequest) (r0 *protos.GetAntipodeAgentInfoReply, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getAntipodeAgentInfoMetrics.Begin()
	defer func() { s.getAntipodeAgentInfoMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "xcweaver.deployerControl.GetAntipodeAgentInfo", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_GetAntipodeAgentInfoRequest_de07f6bb(enc, a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 2, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_ptr_GetAntipodeAgentInfoReply_80d3db5f(dec)
	err = dec.Error()
	return
}

func (s deployerControl_client_stub) GetListenerAddress(ctx context.Context, a0 *protos.GetListenerAddressRequest) (r0 *protos.GetListenerAddressReply, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getListenerAddressMetrics.Begin()
	defer func() { s.getListenerAddressMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "xcweaver.deployerControl.GetListenerAddress", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_GetListenerAddressRequest_82370afc(enc, a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 3, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_ptr_GetListenerAddressReply_a9f3f6f3(dec)
	err = dec.Error()
	return
}

func (s deployerControl_client_stub) GetSelfCertificate(ctx context.Context, a0 *protos.GetSelfCertificateRequest) (r0 *protos.GetSelfCertificateReply, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getSelfCertificateMetrics.Begin()
	defer func() { s.getSelfCertificateMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "xcweaver.deployerControl.GetSelfCertificate", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_GetSelfCertificateRequest_d34f6dc5(enc, a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 4, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_ptr_GetSelfCertificateReply_92d3fba3(dec)
	err = dec.Error()
	return
}

func (s deployerControl_client_stub) HandleTraceSpans(ctx context.Context, a0 *protos.TraceSpans) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.handleTraceSpansMetrics.Begin()
	defer func() { s.handleTraceSpansMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "xcweaver.deployerControl.HandleTraceSpans", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_TraceSpans_ff643e67(enc, a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 5, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s deployerControl_client_stub) LogBatch(ctx context.Context, a0 *protos.LogEntryBatch) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.logBatchMetrics.Begin()
	defer func() { s.logBatchMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "xcweaver.deployerControl.LogBatch", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_LogEntryBatch_b68efcc8(enc, a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 6, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s deployerControl_client_stub) VerifyClientCertificate(ctx context.Context, a0 *protos.VerifyClientCertificateRequest) (r0 *protos.VerifyClientCertificateReply, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.verifyClientCertificateMetrics.Begin()
	defer func() { s.verifyClientCertificateMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "xcweaver.deployerControl.VerifyClientCertificate", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_VerifyClientCertificateRequest_ccc2096f(enc, a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 7, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_ptr_VerifyClientCertificateReply_6b9ae3fa(dec)
	err = dec.Error()
	return
}

func (s deployerControl_client_stub) VerifyServerCertificate(ctx context.Context, a0 *protos.VerifyServerCertificateRequest) (r0 *protos.VerifyServerCertificateReply, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.verifyServerCertificateMetrics.Begin()
	defer func() { s.verifyServerCertificateMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "xcweaver.deployerControl.VerifyServerCertificate", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_VerifyServerCertificateRequest_9e210a97(enc, a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 8, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_ptr_VerifyServerCertificateReply_6fc8c959(dec)
	err = dec.Error()
	return
}

type weaveletControl_client_stub struct {
	stub                     codegen.Stub
	getHealthMetrics         *codegen.MethodMetrics
	getLoadMetrics           *codegen.MethodMetrics
	getMetricsMetrics        *codegen.MethodMetrics
	getProfileMetrics        *codegen.MethodMetrics
	initWeaveletMetrics      *codegen.MethodMetrics
	updateComponentsMetrics  *codegen.MethodMetrics
	updateRoutingInfoMetrics *codegen.MethodMetrics
}

// Check that weaveletControl_client_stub implements the weaveletControl interface.
var _ weaveletControl = (*weaveletControl_client_stub)(nil)

func (s weaveletControl_client_stub) GetHealth(ctx context.Context, a0 *protos.GetHealthRequest) (r0 *protos.GetHealthReply, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getHealthMetrics.Begin()
	defer func() { s.getHealthMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "xcweaver.weaveletControl.GetHealth", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_GetHealthRequest_bbf579ea(enc, a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_ptr_GetHealthReply_643539c1(dec)
	err = dec.Error()
	return
}

func (s weaveletControl_client_stub) GetLoad(ctx context.Context, a0 *protos.GetLoadRequest) (r0 *protos.GetLoadReply, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getLoadMetrics.Begin()
	defer func() { s.getLoadMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "xcweaver.weaveletControl.GetLoad", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_GetLoadRequest_0717c809(enc, a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_ptr_GetLoadReply_49f3ce4b(dec)
	err = dec.Error()
	return
}

func (s weaveletControl_client_stub) GetMetrics(ctx context.Context, a0 *protos.GetMetricsRequest) (r0 *protos.GetMetricsReply, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getMetricsMetrics.Begin()
	defer func() { s.getMetricsMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "xcweaver.weaveletControl.GetMetrics", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_GetMetricsRequest_c478481d(enc, a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 2, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_ptr_GetMetricsReply_54b1de7f(dec)
	err = dec.Error()
	return
}

func (s weaveletControl_client_stub) GetProfile(ctx context.Context, a0 *protos.GetProfileRequest) (r0 *protos.GetProfileReply, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getProfileMetrics.Begin()
	defer func() { s.getProfileMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "xcweaver.weaveletControl.GetProfile", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_GetProfileRequest_b61a028a(enc, a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 3, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_ptr_GetProfileReply_af394018(dec)
	err = dec.Error()
	return
}

func (s weaveletControl_client_stub) InitWeavelet(ctx context.Context, a0 *protos.InitWeaveletRequest) (r0 *protos.InitWeaveletReply, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.initWeaveletMetrics.Begin()
	defer func() { s.initWeaveletMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "xcweaver.weaveletControl.InitWeavelet", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_InitWeaveletRequest_d7977b39(enc, a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 4, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_ptr_InitWeaveletReply_78d29c1c(dec)
	err = dec.Error()
	return
}

func (s weaveletControl_client_stub) UpdateComponents(ctx context.Context, a0 *protos.UpdateComponentsRequest) (r0 *protos.UpdateComponentsReply, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.updateComponentsMetrics.Begin()
	defer func() { s.updateComponentsMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "xcweaver.weaveletControl.UpdateComponents", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_UpdateComponentsRequest_f709e3cd(enc, a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 5, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_ptr_UpdateComponentsReply_dbe1f570(dec)
	err = dec.Error()
	return
}

func (s weaveletControl_client_stub) UpdateRoutingInfo(ctx context.Context, a0 *protos.UpdateRoutingInfoRequest) (r0 *protos.UpdateRoutingInfoReply, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.updateRoutingInfoMetrics.Begin()
	defer func() { s.updateRoutingInfoMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "xcweaver.weaveletControl.UpdateRoutingInfo", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_UpdateRoutingInfoRequest_296c913e(enc, a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 6, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_ptr_UpdateRoutingInfoReply_f7889ece(dec)
	err = dec.Error()
	return
}

// Note that "xcweaver generate" will always generate the error message below.
// Everything is okay. The error message is only relevant if you see it when
// you run "go build" or "go run".
var _ codegen.LatestVersion = codegen.Version[[0][20]struct{}](`

ERROR: You generated this file with 'xcweaver generate' v0.4.86 (codegen
version v0.20.0). The generated code is incompatible with the version of the
github.com/XCWeaver/xcweaver module that you're using. The xcweaver module
version can be found in your go.mod file or by running the following command.

    go list -m github.com/XCWeaver/xcweaver

We recommend updating the xcweaver module and the 'xcweaver generate' command by
running the following.

    go get github.com/XCWeaver/xcweaver@latest
    go install github.com/XCWeaver/xcweaver/cmd/weaver@latest

Then, re-run 'xcweaver generate' and re-build your code. If the problem persists,
please file an issue at https://github.com/XCWeaver/xcweaver/issues.

`)

// Server stub implementations.

type deployerControl_server_stub struct {
	impl    deployerControl
	addLoad func(key uint64, load float64)
}

// Check that deployerControl_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*deployerControl_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s deployerControl_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "ActivateComponent":
		return s.activateComponent
	case "ExportListener":
		return s.exportListener
	case "GetAntipodeAgentInfo":
		return s.getAntipodeAgentInfo
	case "GetListenerAddress":
		return s.getListenerAddress
	case "GetSelfCertificate":
		return s.getSelfCertificate
	case "HandleTraceSpans":
		return s.handleTraceSpans
	case "LogBatch":
		return s.logBatch
	case "VerifyClientCertificate":
		return s.verifyClientCertificate
	case "VerifyServerCertificate":
		return s.verifyServerCertificate
	default:
		return nil
	}
}

func (s deployerControl_server_stub) activateComponent(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 *protos.ActivateComponentRequest
	a0 = serviceweaver_dec_ptr_ActivateComponentRequest_c3e03861(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.ActivateComponent(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_ActivateComponentReply_7f24f708(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s deployerControl_server_stub) exportListener(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 *protos.ExportListenerRequest
	a0 = serviceweaver_dec_ptr_ExportListenerRequest_3683bbeb(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.ExportListener(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_ExportListenerReply_5fe4f6f2(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s deployerControl_server_stub) getAntipodeAgentInfo(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 *protos.GetAntipodeAgentInfoRequest
	a0 = serviceweaver_dec_ptr_GetAntipodeAgentInfoRequest_de07f6bb(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetAntipodeAgentInfo(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_GetAntipodeAgentInfoReply_80d3db5f(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s deployerControl_server_stub) getListenerAddress(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 *protos.GetListenerAddressRequest
	a0 = serviceweaver_dec_ptr_GetListenerAddressRequest_82370afc(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetListenerAddress(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_GetListenerAddressReply_a9f3f6f3(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s deployerControl_server_stub) getSelfCertificate(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 *protos.GetSelfCertificateRequest
	a0 = serviceweaver_dec_ptr_GetSelfCertificateRequest_d34f6dc5(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetSelfCertificate(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_GetSelfCertificateReply_92d3fba3(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s deployerControl_server_stub) handleTraceSpans(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 *protos.TraceSpans
	a0 = serviceweaver_dec_ptr_TraceSpans_ff643e67(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.HandleTraceSpans(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s deployerControl_server_stub) logBatch(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 *protos.LogEntryBatch
	a0 = serviceweaver_dec_ptr_LogEntryBatch_b68efcc8(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.LogBatch(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s deployerControl_server_stub) verifyClientCertificate(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 *protos.VerifyClientCertificateRequest
	a0 = serviceweaver_dec_ptr_VerifyClientCertificateRequest_ccc2096f(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.VerifyClientCertificate(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_VerifyClientCertificateReply_6b9ae3fa(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s deployerControl_server_stub) verifyServerCertificate(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 *protos.VerifyServerCertificateRequest
	a0 = serviceweaver_dec_ptr_VerifyServerCertificateRequest_9e210a97(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.VerifyServerCertificate(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_VerifyServerCertificateReply_6fc8c959(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

type weaveletControl_server_stub struct {
	impl    weaveletControl
	addLoad func(key uint64, load float64)
}

// Check that weaveletControl_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*weaveletControl_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s weaveletControl_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "GetHealth":
		return s.getHealth
	case "GetLoad":
		return s.getLoad
	case "GetMetrics":
		return s.getMetrics
	case "GetProfile":
		return s.getProfile
	case "InitWeavelet":
		return s.initWeavelet
	case "UpdateComponents":
		return s.updateComponents
	case "UpdateRoutingInfo":
		return s.updateRoutingInfo
	default:
		return nil
	}
}

func (s weaveletControl_server_stub) getHealth(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 *protos.GetHealthRequest
	a0 = serviceweaver_dec_ptr_GetHealthRequest_bbf579ea(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetHealth(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_GetHealthReply_643539c1(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s weaveletControl_server_stub) getLoad(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 *protos.GetLoadRequest
	a0 = serviceweaver_dec_ptr_GetLoadRequest_0717c809(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetLoad(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_GetLoadReply_49f3ce4b(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s weaveletControl_server_stub) getMetrics(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 *protos.GetMetricsRequest
	a0 = serviceweaver_dec_ptr_GetMetricsRequest_c478481d(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetMetrics(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_GetMetricsReply_54b1de7f(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s weaveletControl_server_stub) getProfile(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 *protos.GetProfileRequest
	a0 = serviceweaver_dec_ptr_GetProfileRequest_b61a028a(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetProfile(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_GetProfileReply_af394018(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s weaveletControl_server_stub) initWeavelet(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 *protos.InitWeaveletRequest
	a0 = serviceweaver_dec_ptr_InitWeaveletRequest_d7977b39(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.InitWeavelet(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_InitWeaveletReply_78d29c1c(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s weaveletControl_server_stub) updateComponents(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 *protos.UpdateComponentsRequest
	a0 = serviceweaver_dec_ptr_UpdateComponentsRequest_f709e3cd(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.UpdateComponents(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_UpdateComponentsReply_dbe1f570(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s weaveletControl_server_stub) updateRoutingInfo(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 *protos.UpdateRoutingInfoRequest
	a0 = serviceweaver_dec_ptr_UpdateRoutingInfoRequest_296c913e(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.UpdateRoutingInfo(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_UpdateRoutingInfoReply_f7889ece(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

// Reflect stub implementations.

type deployerControl_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that deployerControl_reflect_stub implements the deployerControl interface.
var _ deployerControl = (*deployerControl_reflect_stub)(nil)

func (s deployerControl_reflect_stub) ActivateComponent(ctx context.Context, a0 *protos.ActivateComponentRequest) (r0 *protos.ActivateComponentReply, err error) {
	err = s.caller("ActivateComponent", ctx, []any{a0}, []any{&r0})
	return
}

func (s deployerControl_reflect_stub) ExportListener(ctx context.Context, a0 *protos.ExportListenerRequest) (r0 *protos.ExportListenerReply, err error) {
	err = s.caller("ExportListener", ctx, []any{a0}, []any{&r0})
	return
}

func (s deployerControl_reflect_stub) GetAntipodeAgentInfo(ctx context.Context, a0 *protos.GetAntipodeAgentInfoRequest) (r0 *protos.GetAntipodeAgentInfoReply, err error) {
	err = s.caller("GetAntipodeAgentInfo", ctx, []any{a0}, []any{&r0})
	return
}

func (s deployerControl_reflect_stub) GetListenerAddress(ctx context.Context, a0 *protos.GetListenerAddressRequest) (r0 *protos.GetListenerAddressReply, err error) {
	err = s.caller("GetListenerAddress", ctx, []any{a0}, []any{&r0})
	return
}

func (s deployerControl_reflect_stub) GetSelfCertificate(ctx context.Context, a0 *protos.GetSelfCertificateRequest) (r0 *protos.GetSelfCertificateReply, err error) {
	err = s.caller("GetSelfCertificate", ctx, []any{a0}, []any{&r0})
	return
}

func (s deployerControl_reflect_stub) HandleTraceSpans(ctx context.Context, a0 *protos.TraceSpans) (err error) {
	err = s.caller("HandleTraceSpans", ctx, []any{a0}, []any{})
	return
}

func (s deployerControl_reflect_stub) LogBatch(ctx context.Context, a0 *protos.LogEntryBatch) (err error) {
	err = s.caller("LogBatch", ctx, []any{a0}, []any{})
	return
}

func (s deployerControl_reflect_stub) VerifyClientCertificate(ctx context.Context, a0 *protos.VerifyClientCertificateRequest) (r0 *protos.VerifyClientCertificateReply, err error) {
	err = s.caller("VerifyClientCertificate", ctx, []any{a0}, []any{&r0})
	return
}

func (s deployerControl_reflect_stub) VerifyServerCertificate(ctx context.Context, a0 *protos.VerifyServerCertificateRequest) (r0 *protos.VerifyServerCertificateReply, err error) {
	err = s.caller("VerifyServerCertificate", ctx, []any{a0}, []any{&r0})
	return
}

type weaveletControl_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that weaveletControl_reflect_stub implements the weaveletControl interface.
var _ weaveletControl = (*weaveletControl_reflect_stub)(nil)

func (s weaveletControl_reflect_stub) GetHealth(ctx context.Context, a0 *protos.GetHealthRequest) (r0 *protos.GetHealthReply, err error) {
	err = s.caller("GetHealth", ctx, []any{a0}, []any{&r0})
	return
}

func (s weaveletControl_reflect_stub) GetLoad(ctx context.Context, a0 *protos.GetLoadRequest) (r0 *protos.GetLoadReply, err error) {
	err = s.caller("GetLoad", ctx, []any{a0}, []any{&r0})
	return
}

func (s weaveletControl_reflect_stub) GetMetrics(ctx context.Context, a0 *protos.GetMetricsRequest) (r0 *protos.GetMetricsReply, err error) {
	err = s.caller("GetMetrics", ctx, []any{a0}, []any{&r0})
	return
}

func (s weaveletControl_reflect_stub) GetProfile(ctx context.Context, a0 *protos.GetProfileRequest) (r0 *protos.GetProfileReply, err error) {
	err = s.caller("GetProfile", ctx, []any{a0}, []any{&r0})
	return
}

func (s weaveletControl_reflect_stub) InitWeavelet(ctx context.Context, a0 *protos.InitWeaveletRequest) (r0 *protos.InitWeaveletReply, err error) {
	err = s.caller("InitWeavelet", ctx, []any{a0}, []any{&r0})
	return
}

func (s weaveletControl_reflect_stub) UpdateComponents(ctx context.Context, a0 *protos.UpdateComponentsRequest) (r0 *protos.UpdateComponentsReply, err error) {
	err = s.caller("UpdateComponents", ctx, []any{a0}, []any{&r0})
	return
}

func (s weaveletControl_reflect_stub) UpdateRoutingInfo(ctx context.Context, a0 *protos.UpdateRoutingInfoRequest) (r0 *protos.UpdateRoutingInfoReply, err error) {
	err = s.caller("UpdateRoutingInfo", ctx, []any{a0}, []any{&r0})
	return
}

// Encoding/decoding implementations.

func serviceweaver_enc_ptr_ActivateComponentRequest_c3e03861(enc *codegen.Encoder, arg *protos.ActivateComponentRequest) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_ActivateComponentRequest_c3e03861(dec *codegen.Decoder) *protos.ActivateComponentRequest {
	if !dec.Bool() {
		return nil
	}
	var res protos.ActivateComponentRequest
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_ActivateComponentReply_7f24f708(enc *codegen.Encoder, arg *protos.ActivateComponentReply) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_ActivateComponentReply_7f24f708(dec *codegen.Decoder) *protos.ActivateComponentReply {
	if !dec.Bool() {
		return nil
	}
	var res protos.ActivateComponentReply
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_ExportListenerRequest_3683bbeb(enc *codegen.Encoder, arg *protos.ExportListenerRequest) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_ExportListenerRequest_3683bbeb(dec *codegen.Decoder) *protos.ExportListenerRequest {
	if !dec.Bool() {
		return nil
	}
	var res protos.ExportListenerRequest
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_ExportListenerReply_5fe4f6f2(enc *codegen.Encoder, arg *protos.ExportListenerReply) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_ExportListenerReply_5fe4f6f2(dec *codegen.Decoder) *protos.ExportListenerReply {
	if !dec.Bool() {
		return nil
	}
	var res protos.ExportListenerReply
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_GetAntipodeAgentInfoRequest_de07f6bb(enc *codegen.Encoder, arg *protos.GetAntipodeAgentInfoRequest) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_GetAntipodeAgentInfoRequest_de07f6bb(dec *codegen.Decoder) *protos.GetAntipodeAgentInfoRequest {
	if !dec.Bool() {
		return nil
	}
	var res protos.GetAntipodeAgentInfoRequest
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_GetAntipodeAgentInfoReply_80d3db5f(enc *codegen.Encoder, arg *protos.GetAntipodeAgentInfoReply) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_GetAntipodeAgentInfoReply_80d3db5f(dec *codegen.Decoder) *protos.GetAntipodeAgentInfoReply {
	if !dec.Bool() {
		return nil
	}
	var res protos.GetAntipodeAgentInfoReply
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_GetListenerAddressRequest_82370afc(enc *codegen.Encoder, arg *protos.GetListenerAddressRequest) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_GetListenerAddressRequest_82370afc(dec *codegen.Decoder) *protos.GetListenerAddressRequest {
	if !dec.Bool() {
		return nil
	}
	var res protos.GetListenerAddressRequest
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_GetListenerAddressReply_a9f3f6f3(enc *codegen.Encoder, arg *protos.GetListenerAddressReply) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_GetListenerAddressReply_a9f3f6f3(dec *codegen.Decoder) *protos.GetListenerAddressReply {
	if !dec.Bool() {
		return nil
	}
	var res protos.GetListenerAddressReply
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_GetSelfCertificateRequest_d34f6dc5(enc *codegen.Encoder, arg *protos.GetSelfCertificateRequest) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_GetSelfCertificateRequest_d34f6dc5(dec *codegen.Decoder) *protos.GetSelfCertificateRequest {
	if !dec.Bool() {
		return nil
	}
	var res protos.GetSelfCertificateRequest
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_GetSelfCertificateReply_92d3fba3(enc *codegen.Encoder, arg *protos.GetSelfCertificateReply) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_GetSelfCertificateReply_92d3fba3(dec *codegen.Decoder) *protos.GetSelfCertificateReply {
	if !dec.Bool() {
		return nil
	}
	var res protos.GetSelfCertificateReply
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_TraceSpans_ff643e67(enc *codegen.Encoder, arg *protos.TraceSpans) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_TraceSpans_ff643e67(dec *codegen.Decoder) *protos.TraceSpans {
	if !dec.Bool() {
		return nil
	}
	var res protos.TraceSpans
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_LogEntryBatch_b68efcc8(enc *codegen.Encoder, arg *protos.LogEntryBatch) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_LogEntryBatch_b68efcc8(dec *codegen.Decoder) *protos.LogEntryBatch {
	if !dec.Bool() {
		return nil
	}
	var res protos.LogEntryBatch
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_VerifyClientCertificateRequest_ccc2096f(enc *codegen.Encoder, arg *protos.VerifyClientCertificateRequest) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_VerifyClientCertificateRequest_ccc2096f(dec *codegen.Decoder) *protos.VerifyClientCertificateRequest {
	if !dec.Bool() {
		return nil
	}
	var res protos.VerifyClientCertificateRequest
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_VerifyClientCertificateReply_6b9ae3fa(enc *codegen.Encoder, arg *protos.VerifyClientCertificateReply) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_VerifyClientCertificateReply_6b9ae3fa(dec *codegen.Decoder) *protos.VerifyClientCertificateReply {
	if !dec.Bool() {
		return nil
	}
	var res protos.VerifyClientCertificateReply
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_VerifyServerCertificateRequest_9e210a97(enc *codegen.Encoder, arg *protos.VerifyServerCertificateRequest) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_VerifyServerCertificateRequest_9e210a97(dec *codegen.Decoder) *protos.VerifyServerCertificateRequest {
	if !dec.Bool() {
		return nil
	}
	var res protos.VerifyServerCertificateRequest
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_VerifyServerCertificateReply_6fc8c959(enc *codegen.Encoder, arg *protos.VerifyServerCertificateReply) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_VerifyServerCertificateReply_6fc8c959(dec *codegen.Decoder) *protos.VerifyServerCertificateReply {
	if !dec.Bool() {
		return nil
	}
	var res protos.VerifyServerCertificateReply
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_GetHealthRequest_bbf579ea(enc *codegen.Encoder, arg *protos.GetHealthRequest) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_GetHealthRequest_bbf579ea(dec *codegen.Decoder) *protos.GetHealthRequest {
	if !dec.Bool() {
		return nil
	}
	var res protos.GetHealthRequest
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_GetHealthReply_643539c1(enc *codegen.Encoder, arg *protos.GetHealthReply) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_GetHealthReply_643539c1(dec *codegen.Decoder) *protos.GetHealthReply {
	if !dec.Bool() {
		return nil
	}
	var res protos.GetHealthReply
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_GetLoadRequest_0717c809(enc *codegen.Encoder, arg *protos.GetLoadRequest) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_GetLoadRequest_0717c809(dec *codegen.Decoder) *protos.GetLoadRequest {
	if !dec.Bool() {
		return nil
	}
	var res protos.GetLoadRequest
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_GetLoadReply_49f3ce4b(enc *codegen.Encoder, arg *protos.GetLoadReply) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_GetLoadReply_49f3ce4b(dec *codegen.Decoder) *protos.GetLoadReply {
	if !dec.Bool() {
		return nil
	}
	var res protos.GetLoadReply
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_GetMetricsRequest_c478481d(enc *codegen.Encoder, arg *protos.GetMetricsRequest) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_GetMetricsRequest_c478481d(dec *codegen.Decoder) *protos.GetMetricsRequest {
	if !dec.Bool() {
		return nil
	}
	var res protos.GetMetricsRequest
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_GetMetricsReply_54b1de7f(enc *codegen.Encoder, arg *protos.GetMetricsReply) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_GetMetricsReply_54b1de7f(dec *codegen.Decoder) *protos.GetMetricsReply {
	if !dec.Bool() {
		return nil
	}
	var res protos.GetMetricsReply
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_GetProfileRequest_b61a028a(enc *codegen.Encoder, arg *protos.GetProfileRequest) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_GetProfileRequest_b61a028a(dec *codegen.Decoder) *protos.GetProfileRequest {
	if !dec.Bool() {
		return nil
	}
	var res protos.GetProfileRequest
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_GetProfileReply_af394018(enc *codegen.Encoder, arg *protos.GetProfileReply) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_GetProfileReply_af394018(dec *codegen.Decoder) *protos.GetProfileReply {
	if !dec.Bool() {
		return nil
	}
	var res protos.GetProfileReply
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_InitWeaveletRequest_d7977b39(enc *codegen.Encoder, arg *protos.InitWeaveletRequest) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_InitWeaveletRequest_d7977b39(dec *codegen.Decoder) *protos.InitWeaveletRequest {
	if !dec.Bool() {
		return nil
	}
	var res protos.InitWeaveletRequest
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_InitWeaveletReply_78d29c1c(enc *codegen.Encoder, arg *protos.InitWeaveletReply) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_InitWeaveletReply_78d29c1c(dec *codegen.Decoder) *protos.InitWeaveletReply {
	if !dec.Bool() {
		return nil
	}
	var res protos.InitWeaveletReply
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_UpdateComponentsRequest_f709e3cd(enc *codegen.Encoder, arg *protos.UpdateComponentsRequest) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_UpdateComponentsRequest_f709e3cd(dec *codegen.Decoder) *protos.UpdateComponentsRequest {
	if !dec.Bool() {
		return nil
	}
	var res protos.UpdateComponentsRequest
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_UpdateComponentsReply_dbe1f570(enc *codegen.Encoder, arg *protos.UpdateComponentsReply) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_UpdateComponentsReply_dbe1f570(dec *codegen.Decoder) *protos.UpdateComponentsReply {
	if !dec.Bool() {
		return nil
	}
	var res protos.UpdateComponentsReply
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_UpdateRoutingInfoRequest_296c913e(enc *codegen.Encoder, arg *protos.UpdateRoutingInfoRequest) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_UpdateRoutingInfoRequest_296c913e(dec *codegen.Decoder) *protos.UpdateRoutingInfoRequest {
	if !dec.Bool() {
		return nil
	}
	var res protos.UpdateRoutingInfoRequest
	dec.DecodeProto(&res)
	return &res
}

func serviceweaver_enc_ptr_UpdateRoutingInfoReply_f7889ece(enc *codegen.Encoder, arg *protos.UpdateRoutingInfoReply) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeProto(arg)
	}
}

func serviceweaver_dec_ptr_UpdateRoutingInfoReply_f7889ece(dec *codegen.Decoder) *protos.UpdateRoutingInfoReply {
	if !dec.Bool() {
		return nil
	}
	var res protos.UpdateRoutingInfoReply
	dec.DecodeProto(&res)
	return &res
}
